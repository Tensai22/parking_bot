import asyncio
import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy.future import select
import config
from database import async_session
from models import ParkingSpot, User
from datetime import datetime, timedelta, timezone
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from typing import Optional
from sqlalchemy import func 

bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìç –ù–∞–π—Ç–∏ –ø–∞—Ä–∫–æ–≤–∫—É")],
        [KeyboardButton(text="üé≤ –ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞")],
        [KeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–∞—Ä–∫–æ–≤–∫—É")],
        [KeyboardButton(text="üöò –ú–æ–∏ –ø–∞—Ä–∫–æ–≤–∫–∏")]
    ],
    resize_keyboard=True
)


class RegistrationState(StatesGroup):
    waiting_for_car_number = State()


class PaymentState(StatesGroup):
    processing_payment = State()


@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    tg_id = str(message.from_user.id)

    async with async_session() as session:
        result = await session.execute(select(User).where(User.tg_id == tg_id))
        user = result.scalars().first()

    if not user:
        user = User(tg_id=tg_id, balance=0)
        async with async_session() as session:
            session.add(user)
            await session.commit()

    if not user.car_number:
        await message.answer("üöó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
        await state.set_state(RegistrationState.waiting_for_car_number)
    else:
        await message.answer("üöó –ü—Ä–∏–≤–µ—Ç! –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)


@dp.message(RegistrationState.waiting_for_car_number)
async def process_car_number(message: types.Message, state: FSMContext):
    car_number = message.text.strip()

    async with async_session() as session:
        result = await session.execute(select(User).where(User.tg_id == str(message.from_user.id)))
        user = result.scalars().first()

        if user:
            user.car_number = car_number
            session.add(user)
            await session.commit()

            await message.answer(f"‚úÖ –í–∞—à –Ω–æ–º–µ—Ä –∞–≤—Ç–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {car_number}\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
                                 reply_markup=main_kb)
            await state.clear()


async def get_parking_spots():
    async with async_session() as session:
        result = await session.execute(
            select(ParkingSpot)
            .where(
                ParkingSpot.available == True,
                ParkingSpot.free_spaces > 0,
                ParkingSpot.parent_spot_id == None  # –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∫–æ–≤–∫–∏
            )
        )
        return result.scalars().all()


async def get_user_id(session, tg_id: str) -> Optional[int]:
    result = await session.execute(select(User.id).where(User.tg_id == tg_id))
    return result.scalar()


async def get_or_create_user(tg_id):
    async with async_session() as session:
        user = await session.execute(select(User).where(User.tg_id == str(tg_id)))
        user = user.scalars().first()

        if not user:
            new_user = User(tg_id=str(tg_id), balance=0)
            session.add(new_user)
            await session.commit()
            return new_user, True
        return user, False


async def get_random_parking():
    parking_spots = await get_parking_spots()
    return random.choice(parking_spots) if parking_spots else None


@dp.message(F.text == "üìç –ù–∞–π—Ç–∏ –ø–∞—Ä–∫–æ–≤–∫—É")
async def find_parking(message: types.Message):
    await get_or_create_user(message.from_user.id)
    parking_spots = await get_parking_spots()

    if not parking_spots:
        await message.answer("üöó –°–≤–æ–±–æ–¥–Ω—ã—Ö –ø–∞—Ä–∫–æ–≤–æ–∫ –Ω–µ—Ç.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üèÅ {spot.location} - {spot.price_per_hour} ‚Ç∏/—á–∞—Å ({spot.free_spaces} –º–µ—Å—Ç)",
                              callback_data=f"select_parking_{spot.id}")] for spot in parking_spots
    ])
    await message.answer("üîç –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∫–æ–≤–∫—É:", reply_markup=keyboard)


@dp.message(F.text == "üé≤ –ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞")
async def nearest_parking(message: types.Message):
    await get_or_create_user(message.from_user.id)
    parking_spot = await get_random_parking()

    if not parking_spot:
        await message.answer("üöó –°–≤–æ–±–æ–¥–Ω—ã—Ö –ø–∞—Ä–∫–æ–≤–æ–∫ –Ω–µ—Ç.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—ã–±—Ä–∞—Ç—å", callback_data=f"select_parking_{parking_spot.id}")]
    ])

    await message.answer(
        f"üé≤ –í–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Ä–∫–æ–≤–∫–∞:\nüèÅ {parking_spot.location}\nüí∞ –¶–µ–Ω–∞: {parking_spot.price_per_hour} ‚Ç∏/—á–∞—Å\nüöó –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {parking_spot.free_spaces}",
        reply_markup=keyboard
    )


@dp.message(F.text.lower().strip() == "üöò –º–æ–∏ –ø–∞—Ä–∫–æ–≤–∫–∏")
async def my_parkings(message: types.Message):
    tg_id = str(message.from_user.id)

    async with async_session() as session:
        user_id = await get_user_id(session, tg_id)
        if not user_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        now_utc = datetime.now(timezone.utc).replace(tzinfo=None)
        result = await session.execute(
            select(ParkingSpot).where(
                ParkingSpot.user_id == user_id,
                ParkingSpot.end_time > now_utc,
                ParkingSpot.parent_spot_id.is_not(None)  # –¢–æ–ª—å–∫–æ –∑–∞–Ω—è—Ç—ã–µ –º–µ—Å—Ç–∞
            )
        )
        active_parkings = result.scalars().all()

        if not active_parkings:
            await message.answer("üöó –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä–∫–æ–≤–æ–∫.")
            return

        response = "üÖøÔ∏è **–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∫–æ–≤–∫–∏:**\n\n"
        for parking in active_parkings:
            end_time_utc = parking.end_time
            remaining_minutes = int((end_time_utc - now_utc).total_seconds() // 60)
            response += (
                f"üèÅ **–õ–æ–∫–∞—Ü–∏—è**: {parking.location}\n"
                f"üí∞ **–¶–µ–Ω–∞**: {parking.price_per_hour} ‚Ç∏/—á–∞—Å\n"
                f"‚è≥ **–û–∫–æ–Ω—á–∞–Ω–∏–µ**: {end_time_utc.strftime('%H:%M')} UTC\n"
                f"üïí –û—Å—Ç–∞–ª–æ—Å—å: {remaining_minutes} –º–∏–Ω\n\n"
            )
        await message.answer(response, parse_mode="Markdown")


@dp.callback_query(F.data.startswith("select_parking_"))
async def select_parking(callback: types.CallbackQuery, state: FSMContext):
    user, is_new = await get_or_create_user(callback.from_user.id)

    if is_new:
        await state.update_data(tg_id=str(callback.from_user.id))
        await callback.message.answer("üöó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
        await state.set_state(RegistrationState.waiting_for_car_number)
        return

    parking_id = int(callback.data.split("_")[-1])

    async with async_session() as session:
        parking_spot = await session.get(ParkingSpot, parking_id)

    if not parking_spot or not parking_spot.available or parking_spot.free_spaces <= 0:
        await callback.message.answer("üöó –≠—Ç–∞ –ø–∞—Ä–∫–æ–≤–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 1 —á–∞—Å", callback_data=f"pay_parking_{parking_id}")]
    ])

    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞—Ä–∫–æ–≤–∫—É:\nüèÅ {parking_spot.location}\nüí∞ –¶–µ–Ω–∞: {parking_spot.price_per_hour} ‚Ç∏/—á–∞—Å\nüöó –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {parking_spot.free_spaces}",
        reply_markup=keyboard
    )

    await state.set_state(PaymentState.processing_payment)
    await state.update_data(parking_id=parking_id)


@dp.callback_query(F.data.startswith("pay_parking_"))
async def pay_parking(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    parking_id = int(callback.data.split("_")[-1])

    async with async_session() as session:
        async with session.begin():
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–∫–æ–≤–∫—É
            user = await session.execute(
                select(User).where(User.tg_id == str(user_id))
            )
            user = user.scalars().first()

            parking_spot = await session.execute(
                select(ParkingSpot)
                .where(ParkingSpot.id == parking_id)
                .with_for_update()
            )
            parking_spot = parking_spot.scalars().first()

            if not user or not parking_spot:
                await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            if parking_spot.free_spaces <= 0:
                await callback.message.answer("‚ùå –≠—Ç–æ –º–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ!")
                return

            if user.balance < parking_spot.price_per_hour:
                await callback.message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            parking_spot.free_spaces -= 1
            if parking_spot.free_spaces <= 0:
                parking_spot.available = False

            user.balance -= parking_spot.price_per_hour
            now = datetime.now(timezone.utc).replace(tzinfo=None)
            end_time = (now + timedelta(hours=1)).replace(tzinfo=None)

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –∑–∞–Ω—è—Ç–æ–º –º–µ—Å—Ç–µ
            new_parking = ParkingSpot(
                location=parking_spot.location,
                price_per_hour=parking_spot.price_per_hour,
                available=False,
                free_spaces=0,  # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–æ–µ –º–µ—Å—Ç–æ
                start_time=now,
                end_time=end_time,
                user_id=user.id,
                parent_spot_id=parking_spot.id  # –°–≤—è–∑—å —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä–∫–æ–≤–∫–æ–π
            )
            session.add(new_parking)

    await callback.message.answer(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –í—ã –∑–∞–ø–∞—Ä–∫–æ–≤–∞–ª–∏—Å—å –Ω–∞ {parking_spot.location}.\n"
        f"üïí –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {user.balance} ‚Ç∏"
    )


async def release_parking_if_not_paid(parking_id: int, timeout: int):
    await asyncio.sleep(timeout)
    async with async_session() as session:
        parking = await session.get(ParkingSpot, parking_id)
        if parking and not parking.start_time:
            parking.free_spaces += 1
            await session.commit()


async def check_parking_expiration():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö –ø–∞—Ä–∫–æ–≤–æ–∫"""
    while True:
        async with async_session() as session:
            async with session.begin():
                now = datetime.now(timezone.utc)

                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏—Å—Ç–µ–∫—à–∏–µ –∑–∞–Ω—è—Ç—ã–µ –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã–µ –º–µ—Å—Ç–∞
                expired_spots = await session.execute(
                    select(ParkingSpot)
                    .where(
                        func.timezone('UTC', ParkingSpot.end_time) <= now,
                ParkingSpot.parent_spot_id.is_not(None)
                )
                .with_for_update()
            )   
                expired_spots = expired_spots.scalars().all()

                for spot in expired_spots:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞—Ä–∫–æ–≤–∫—É
                    parent = await session.get(
                        ParkingSpot,
                        spot.parent_spot_id,
                        with_for_update=True
                    )

                    if parent:
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ
                        parent.free_spaces += 1
                        if not parent.available:
                            parent.available = True
                        session.add(parent)

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = await session.get(User, spot.user_id)
                    if user:
                        await bot.send_message(
                            user.tg_id,
                            f"‚åõ –í—Ä–µ–º—è –ø–∞—Ä–∫–æ–≤–∫–∏ –∏—Å—Ç–µ–∫–ª–æ: {spot.location}"
                        )

                    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–Ω—è—Ç–æ–º –º–µ—Å—Ç–µ
                    await session.delete(spot)

                await session.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        await asyncio.sleep(60)


async def main():
    asyncio.create_task(check_parking_expiration())
    await bot.delete_webhook(drop_pending_updates=True)
    asyncio.create_task(check_parking_expiration())
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await dp.start_polling(bot)



if __name__ == "__main__":
    asyncio.run(main())